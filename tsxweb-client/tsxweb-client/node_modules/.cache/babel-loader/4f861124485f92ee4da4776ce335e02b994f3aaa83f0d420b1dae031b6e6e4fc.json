{"ast":null,"code":"import { get_record } from './record';\nexport function generate_request(prompt, user) {\n  return get_record(user.record1) + prompt;\n}\nexport async function getUser(username, password) {\n  try {\n    // üëáÔ∏è const response: Response\n    const response = await fetch('http://localhost:8080/getuser', {\n      method: 'GET',\n      headers: {\n        username: username,\n        password: password,\n        Accept: 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`Error! status: ${response.status}`);\n    }\n\n    // üëáÔ∏è const result: GetUsersResponse\n    const result = await response.json();\n    console.log('result is: ', JSON.stringify(result, null, 4));\n    return result;\n  } catch (error) {\n    if (error instanceof Error) {\n      console.log('error message: ', error.message);\n      return error.message;\n    } else {\n      console.log('unexpected error: ', error);\n      return 'An unexpected error occurred';\n    }\n  }\n}","map":{"version":3,"names":["get_record","generate_request","prompt","user","record1","getUser","username","password","response","fetch","method","headers","Accept","ok","Error","status","result","json","console","log","JSON","stringify","error","message"],"sources":["/Users/farhadguliyev/Documents/GitHub/Medsos/tsxweb-client/tsxweb-client/src/models/User.components.tsx"],"sourcesContent":["import {record, get_record} from './record'\ntype User={\n    username:string,\n    id:number,\n    email:string,\n    record1:record\n};\nexport function generate_request(prompt:string, user:User){\n    return get_record(user.record1) + prompt;\n}\ntype GetUsersResponse = {\n    data: User[];\n};\n\nexport async function getUser(username:string, password:string) {\n    try {\n        // üëáÔ∏è const response: Response\n        const response = await fetch('http://localhost:8080/getuser', {\n            method: 'GET',\n            headers: {\n                username:username,\n                password:password,\n                Accept: 'application/json',\n            },\n        });\n\n        if (!response.ok) {\n            throw new Error(`Error! status: ${response.status}`);\n        }\n\n        // üëáÔ∏è const result: GetUsersResponse\n        const result = (await response.json()) as User;\n\n        console.log('result is: ', JSON.stringify(result, null, 4));\n\n        return result;\n    } catch (error) {\n        if (error instanceof Error) {\n            console.log('error message: ', error.message);\n            return error.message;\n        } else {\n            console.log('unexpected error: ', error);\n            return 'An unexpected error occurred';\n        }\n    }\n}\n\n"],"mappings":"AAAA,SAAgBA,UAAU,QAAO,UAAU;AAO3C,OAAO,SAASC,gBAAgBA,CAACC,MAAa,EAAEC,IAAS,EAAC;EACtD,OAAOH,UAAU,CAACG,IAAI,CAACC,OAAO,CAAC,GAAGF,MAAM;AAC5C;AAKA,OAAO,eAAeG,OAAOA,CAACC,QAAe,EAAEC,QAAe,EAAE;EAC5D,IAAI;IACA;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAA+B,EAAE;MAC1DC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACLL,QAAQ,EAACA,QAAQ;QACjBC,QAAQ,EAACA,QAAQ;QACjBK,MAAM,EAAE;MACZ;IACJ,CAAC,CAAC;IAEF,IAAI,CAACJ,QAAQ,CAACK,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAE,kBAAiBN,QAAQ,CAACO,MAAO,EAAC,CAAC;IACxD;;IAEA;IACA,MAAMC,MAAM,GAAI,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAU;IAE9CC,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEC,IAAI,CAACC,SAAS,CAACL,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;IAE3D,OAAOA,MAAM;EACjB,CAAC,CAAC,OAAOM,KAAK,EAAE;IACZ,IAAIA,KAAK,YAAYR,KAAK,EAAE;MACxBI,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEG,KAAK,CAACC,OAAO,CAAC;MAC7C,OAAOD,KAAK,CAACC,OAAO;IACxB,CAAC,MAAM;MACHL,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEG,KAAK,CAAC;MACxC,OAAO,8BAA8B;IACzC;EACJ;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}